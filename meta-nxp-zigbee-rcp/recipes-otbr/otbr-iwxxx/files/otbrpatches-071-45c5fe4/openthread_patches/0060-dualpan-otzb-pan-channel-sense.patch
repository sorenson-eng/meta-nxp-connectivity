/*
*  Copyright (c) 2020, The OpenThread Authors.
*  Copyright 2024 NXP
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holder nor the
*     names of its contributors may be used to endorse or promote products
*     derived from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/

/*
* Header for patch information.
* Description : OpenThread stack provides apis to sense the side Zigbee PAN channel,
*               using which OT applications can sense and configure the single PAN RF
*               channel, to achieve optimum performance.
* Version : v001
* Mandatory/Optional : Mandatory
* Impact if not applied : ot application may not be able to sense the side PAN channel.
*/

diff --git a/include/openthread/platform/radio.h b/include/openthread/platform/radio.h
index 57a455dad..db2f92898 100644
--- a/include/openthread/platform/radio.h
+++ b/include/openthread/platform/radio.h
@@ -1483,6 +1483,18 @@ otError otPlatRadioGetFwVersionString(otInstance *aInstance, const char *fwVersi
 */
 otError otPlatRadioIRThresholdConfig(otInstance *aInstance, otIRConfig *aIRConfig, uint8_t aSetValue);
 
+/**
+ * @}
+ *
+*/
+otError otPlatRadioGetSidePanChannel(otInstance *aInstance, uint8_t* aPanChannel);
+
+/**
+ * @}
+ *
+*/
+otError otPlatRadioSetOtPanChannel(otInstance *aInstance, uint8_t aPanChannel);
+
 #ifdef __cplusplus
 } // end of extern "C"
 #endif
diff --git a/src/cli/cli.cpp b/src/cli/cli.cpp
index 2a98ee0ec..87ed6a9a2 100644
--- a/src/cli/cli.cpp
+++ b/src/cli/cli.cpp
@@ -3160,6 +3160,7 @@ exit:
 template <> otError Interpreter::Process<Cmd("ifconfig")>(Arg aArgs[])
 {
     otError error = OT_ERROR_NONE;
+    uint8_t aPanChannel = 0, macPanChannel = 0;
 
     /**
      * @cli ifconfig
@@ -3203,11 +3204,26 @@ template <> otError Interpreter::Process<Cmd("ifconfig")>(Arg aArgs[])
      */
     else if (aArgs[0] == "up")
     {
+        otPlatRadioGetSidePanChannel(GetInstancePtr(), &aPanChannel);
+        macPanChannel = otLinkGetChannel(GetInstancePtr());
+
+        if (aPanChannel != 0 && aPanChannel != macPanChannel)
+        {
+            OutputLine("PAN Channel Already Configured by Side PAN to %d", aPanChannel);
+            OutputLine("Re-Configuring OT PAN Channel to %d", aPanChannel);
+            SuccessOrExit(error = otPlatRadioSetOtPanChannel(GetInstancePtr(), aPanChannel));
+        }
+        else
+        {
+            OutputLine("Configure OT PAN Channel to %d", macPanChannel);
+            SuccessOrExit(error = otPlatRadioSetOtPanChannel(GetInstancePtr(), macPanChannel));
+        }
         SuccessOrExit(error = otIp6SetEnabled(GetInstancePtr(), true));
     }
     else if (aArgs[0] == "down")
     {
         SuccessOrExit(error = otIp6SetEnabled(GetInstancePtr(), false));
+        SuccessOrExit(error = otPlatRadioSetOtPanChannel(GetInstancePtr(), 0));
     }
     else
     {
diff --git a/src/core/radio/radio.hpp b/src/core/radio/radio.hpp
index c8bb938a3..4ff73de3d 100644
--- a/src/core/radio/radio.hpp
+++ b/src/core/radio/radio.hpp
@@ -287,6 +287,14 @@ public:
      */
     void GetIeeeEui64(Mac::ExtAddress &aIeeeEui64);
 
+    /**
+     * Sets the OT PAN Channel for the device.
+     *
+     * @param[out] aPanChannel  Open Thread PAN Channel value for 15.4 PHY..
+     *
+     */
+    void SetOtPanChannel(uint8_t aPanChannel);
+
     /**
      * Gets the radio capabilities.
      *
@@ -863,6 +871,11 @@ inline uint32_t Radio::GetSupportedChannelMask(void) { return otPlatRadioGetSupp
 
 inline uint32_t Radio::GetPreferredChannelMask(void) { return otPlatRadioGetPreferredChannelMask(GetInstancePtr()); }
 
+inline void Radio::SetOtPanChannel(uint8_t aPanChannel)
+{
+    otPlatRadioSetOtPanChannel(GetInstancePtr(), aPanChannel);
+}
+
 //---------------------------------------------------------------------------------------------------------------------
 // If IEEE 802.15.4 is among supported radio links, provide inline
 // mapping of `Radio` method to related `otPlatRadio` functions.
diff --git a/src/lib/spinel/radio_spinel.cpp b/src/lib/spinel/radio_spinel.cpp
index 68c609dcb..0a1027b9f 100644
--- a/src/lib/spinel/radio_spinel.cpp
+++ b/src/lib/spinel/radio_spinel.cpp
@@ -1024,6 +1024,18 @@ otError RadioSpinel::GetFwVersion(const char *fwVersion, uint8_t fwVersionLen)
     return error;
 }
 
+otError RadioSpinel::GetSidePanChannel(uint8_t &aPanChannel)
+{
+    otError error = Get(SPINEL_PROP_VENDOR_NXP_GET_SET_PAN_CHANNEL_CMD, SPINEL_DATATYPE_UINT8_S, &aPanChannel);
+    return error;
+}
+
+otError RadioSpinel::SetOtPanChannel(uint8_t aPanChannel)
+{
+    otError error = Set(SPINEL_PROP_VENDOR_NXP_GET_SET_PAN_CHANNEL_CMD, SPINEL_DATATYPE_UINT8_S, aPanChannel);
+    return error;
+}
+
 otError RadioSpinel::SetExtendedAddress(const otExtAddress &aExtAddress)
 {
     otError error;
diff --git a/src/lib/spinel/radio_spinel.hpp b/src/lib/spinel/radio_spinel.hpp
index 49ab7559e..4b96f54fc 100644
--- a/src/lib/spinel/radio_spinel.hpp
+++ b/src/lib/spinel/radio_spinel.hpp
@@ -337,6 +337,28 @@ public:
     */
     otError IRThresholdConfig(otIRConfig &aIRConfig, uint8_t aSetValue);
 
+    /**
+     * @brief Get the Openrating Side PAN Channel for 15.4
+     *
+     * @param &aPanChannel
+     * will contain the PAN channel currently in use by 15.4 PHY
+     * (2.4G Band => CH11 to CH26)
+     *
+     * @return otError
+     */
+    otError GetSidePanChannel(uint8_t &aPanChannel);
+
+    /**
+     * @brief Set the Openrating OT PAN Channel for 15.4
+     *
+     * @param aPanChannel
+     * will contain the PAN channel currently to be used by 15.4 PHY
+     * (2.4G Band => CH11 to CH26)
+     *
+     * @return otError
+     */
+    otError SetOtPanChannel(uint8_t aPanChannel);
+
     /**
      * Sets the Extended Address for address filtering.
      *
diff --git a/src/lib/spinel/spinel.h b/src/lib/spinel/spinel.h
index d7df0b58b..2740b9402 100644
--- a/src/lib/spinel/spinel.h
+++ b/src/lib/spinel/spinel.h
@@ -4913,6 +4913,7 @@ enum
 
     SPINEL_PROP_VENDOR_NXP_IR_CONFIG     = (SPINEL_PROP_VENDOR__BEGIN + 0x100),
     SPINEL_PROP_VENDOR_NXP_IR_CMD        = (SPINEL_PROP_VENDOR__BEGIN + 0x101),
+    SPINEL_PROP_VENDOR_NXP_GET_SET_PAN_CHANNEL_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x102),
     SPINEL_PROP_VENDOR_NXP_SET_EUI64_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10A),
     SPINEL_PROP_VENDOR_NXP_GET_SET_TXPOWERLIMIT_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10B),
     SPINEL_PROP_VENDOR_NXP_GET_SET_CCA_CONFIGURE_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10C),
diff --git a/src/posix/platform/daemon.cpp b/src/posix/platform/daemon.cpp
index 269a9f8c2..90f6a881e 100644
--- a/src/posix/platform/daemon.cpp
+++ b/src/posix/platform/daemon.cpp
@@ -734,6 +734,28 @@ otError ProcessGetSetIRThreshold(void *aContext, uint8_t aArgsLength, char *aArg
     return OT_ERROR_NONE;
 }
 
+otError ProcessGetSidePanChannel(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    OT_UNUSED_VARIABLE(aArgs);
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t aPanChannel = 0;
+
+    if ( aArgsLength == 0 ) // get PAN Channel
+    {
+        otPlatRadioGetSidePanChannel((otInstance*)aContext, &aPanChannel);
+
+        // Print value as ot-cli output
+        otCliOutputFormat("Side PAN Channel(0:UnConfigured): %d\r\n", aPanChannel);
+        error = OT_ERROR_NONE;
+    }
+    else
+    {
+        //syslog(LOG_INFO, "GetPanChannel FAILED! Invalid input arg");
+    }
+
+    return error;
+}
+
 static const otCliCommand kCommands[] = {
     {"ircfg", ProcessIRConfig},    //=> OutOfBand Independent Reset Configuration ircfg <1> means OOB mode
     {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
@@ -743,7 +765,8 @@ static const otCliCommand kCommands[] = {
     {"ccacfg", ProcessGetSetCcaCfg}, //=> Set/Get CCA configuration for 15.4 CCA Before Tx operation
     {"fwversion", ProcessGetFwVersion}, //=> Get firmware version for 15.4
     {"spifreq", ProcessGetSetSpiFrequency},  //=> Get/Set SPI frequency supported by RCP
-    {"irthold", ProcessGetSetIRThreshold}   //=> OutOfBand Independent Reset Threshold configuration
+    {"irthold", ProcessGetSetIRThreshold},   //=> OutOfBand Independent Reset Threshold configuration
+    {"sidepanch", ProcessGetSidePanChannel} //=> Get Side PAN Channel for 15.4
 };
 } //extern "C"
 
diff --git a/src/posix/platform/radio.cpp b/src/posix/platform/radio.cpp
index b715981da..ff61134df 100644
--- a/src/posix/platform/radio.cpp
+++ b/src/posix/platform/radio.cpp
@@ -1117,6 +1117,18 @@ otError otPlatRadioIRThresholdConfig(otInstance *aInstance, otIRConfig *aotIRCon
     return GetRadioSpinel().IRThresholdConfig(*aotIRConfig, aSetValue);
 }
 
+otError otPlatRadioSetOtPanChannel(otInstance *aInstance, uint8_t aPanChannel)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    return GetRadioSpinel().SetOtPanChannel(aPanChannel);
+}
+
+otError otPlatRadioGetSidePanChannel(otInstance *aInstance, uint8_t* aPanChannel)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    return GetRadioSpinel().GetSidePanChannel(*aPanChannel);
+}
+
 #if OPENTHREAD_CONFIG_PLATFORM_BOOTLOADER_MODE_ENABLE
 otError otPlatResetToBootloader(otInstance *aInstance)
 {
