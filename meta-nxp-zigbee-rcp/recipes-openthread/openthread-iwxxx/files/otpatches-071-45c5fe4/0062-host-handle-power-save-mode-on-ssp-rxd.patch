/*
*  Copyright (c) 2020, The OpenThread Authors.
*  Copyright 2024 NXP
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holder nor the
*     names of its contributors may be used to endorse or promote products
*     derived from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/

/*
* Header for patch information.
* Description : WakeUp from DeepSleep by using SPI TX line (MOSI). When wpan is not UP,
*               add a wake-up signature when OT APP exchanges spi data with RCP.
* Version : v001
* Mandatory/Optional : Mandatory
* Impact if not applied : ot application may not be able to wake-up RCP. Recovery will fail.
*/

diff --git a/src/lib/spinel/radio_spinel.cpp b/src/lib/spinel/radio_spinel.cpp
index ac99a2ddd..d18758d71 100644
--- a/src/lib/spinel/radio_spinel.cpp
+++ b/src/lib/spinel/radio_spinel.cpp
@@ -1831,6 +1831,9 @@ otError RadioSpinel::Receive(uint8_t aChannel)
         mTxRadioTid = 0;
     }
 
+    // POWER SAVE OFF
+    mSpinelDriver->PowerSaveMode(false);
+
     mState = kStateReceive;
 
 exit:
@@ -1847,6 +1850,9 @@ otError RadioSpinel::Sleep(void)
         error = Set(SPINEL_PROP_MAC_RAW_STREAM_ENABLED, SPINEL_DATATYPE_BOOL_S, false);
         EXPECT_NO_ERROR(error);
 
+        // POWER SAVE ON
+        mSpinelDriver->PowerSaveMode(true);
+
         mState = kStateSleep;
         break;
 
diff --git a/src/lib/spinel/spinel_driver.cpp b/src/lib/spinel/spinel_driver.cpp
index 93192bf35..f5302c4be 100644
--- a/src/lib/spinel/spinel_driver.cpp
+++ b/src/lib/spinel/spinel_driver.cpp
@@ -100,6 +100,11 @@ void SpinelDriver::Deinit(void)
     new (this) SpinelDriver();
 }
 
+void SpinelDriver::PowerSaveMode(bool aEnabled)
+{
+    mSpinelInterface->PowerSaveMode(aEnabled);
+}
+
 otError SpinelDriver::SendReset(uint8_t aResetType)
 {
     otError        error = OT_ERROR_NONE;
diff --git a/src/lib/spinel/spinel_driver.hpp b/src/lib/spinel/spinel_driver.hpp
index 7372ad166..9b6c2e5b4 100644
--- a/src/lib/spinel/spinel_driver.hpp
+++ b/src/lib/spinel/spinel_driver.hpp
@@ -232,6 +232,16 @@ public:
      */
     spinel_iid_t GetIid(void) { return mIid; }
 
+    /**
+     * enable/Disable Power Save mode
+     *
+     * @param[in] aEnabled  enable/disable
+     *
+     * @retval  none
+     *
+     */
+    void PowerSaveMode(bool aEnabled);
+
 private:
     static constexpr uint16_t kMaxSpinelFrame    = SPINEL_FRAME_MAX_SIZE;
     static constexpr uint16_t kVersionStringSize = 128;
diff --git a/src/lib/spinel/spinel_interface.hpp b/src/lib/spinel/spinel_interface.hpp
index 6050b574a..8657aa603 100644
--- a/src/lib/spinel/spinel_interface.hpp
+++ b/src/lib/spinel/spinel_interface.hpp
@@ -160,6 +160,12 @@ public:
      */
     virtual const otRcpInterfaceMetrics *GetRcpInterfaceMetrics(void) const = 0;
 
+    /**
+     * Power Save Mode feature virtual method.
+     *
+     */
+    virtual void PowerSaveMode(bool aEnabled) = 0;
+
     /**
      * Marks destructor virtual method.
      *
diff --git a/src/posix/platform/hdlc_interface.hpp b/src/posix/platform/hdlc_interface.hpp
index 36eee3492..a5835738f 100644
--- a/src/posix/platform/hdlc_interface.hpp
+++ b/src/posix/platform/hdlc_interface.hpp
@@ -156,6 +156,12 @@ public:
      */
     otError HardwareReset(void) { return OT_ERROR_NOT_IMPLEMENTED; }
 
+    /**
+     * Power Save Mode feature
+     *
+     */
+    void PowerSaveMode(bool aEnabled) { OT_UNUSED_VARIABLE(aEnabled); }
+
     /**
      * Returns the RCP interface metrics.
      *
diff --git a/src/posix/platform/include/openthread/openthread-system.h b/src/posix/platform/include/openthread/openthread-system.h
index 8e15f8e77..dc36665f4 100644
--- a/src/posix/platform/include/openthread/openthread-system.h
+++ b/src/posix/platform/include/openthread/openthread-system.h
@@ -67,6 +67,7 @@ enum
     OT_PLATFORM_CONFIG_SPI_DEFAULT_SMALL_PACKET_SIZE =
         48,                                ///< Default smallest SPI packet size we can receive in a single transaction.
     OT_PLATFORM_CONFIG_MAX_RADIO_URLS = 2, ///< Max number of Radio URLs.
+    OT_PLATFORM_CONFIG_SPI_DEFAULT_WAKEUP_DELAY_US = 4000, ///< Default wakeup delay after SPI C̅S̅ assertion, in µsec.
 };
 
 /**
diff --git a/src/posix/platform/spi_interface.cpp b/src/posix/platform/spi_interface.cpp
index 218b88748..7e1f78e7d 100644
--- a/src/posix/platform/spi_interface.cpp
+++ b/src/posix/platform/spi_interface.cpp
@@ -84,6 +84,8 @@ SpiInterface::SpiInterface(const Url::Url &aRadioUrl)
     , mSpiSlaveDataLen(0)
     , mDidRxFrame(false)
     , mSpiRxDiscard(0)
+    , mSpiAddWakeUpSignature(true)
+    , mSpiWakeUpDelayUs(OT_PLATFORM_CONFIG_SPI_DEFAULT_WAKEUP_DELAY_US)
 {
 }
 
@@ -94,12 +96,34 @@ void SpiInterface::ResetStates(void)
     mSpiTxPayloadSize     = 0;
     mDidPrintRateLimitLog = false;
     mSpiSlaveDataLen      = 0;
-    mSpiRxDiscard    = 0;
+    mSpiRxDiscard         = 0;
+    mSpiAddWakeUpSignature= true;
+    mSpiWakeUpDelayUs     = OT_PLATFORM_CONFIG_SPI_DEFAULT_WAKEUP_DELAY_US;
     memset(mSpiTxFrameBuffer, 0, sizeof(mSpiTxFrameBuffer));
     memset(&mInterfaceMetrics, 0, sizeof(mInterfaceMetrics));
     mInterfaceMetrics.mRcpInterfaceType = kSpinelInterfaceTypeSpi;
 }
 
+void SpiInterface::PowerSaveMode(bool aEnabled)
+{
+    mSpiAddWakeUpSignature = aEnabled;
+
+    if(aEnabled)
+    {
+        // Applied wakeup delay - RCP might be in SLEEP state
+        mSpiWakeUpDelayUs = OT_PLATFORM_CONFIG_SPI_DEFAULT_WAKEUP_DELAY_US;
+
+        if( mSpiCsDelayUs > mSpiWakeUpDelayUs )
+        {
+            mSpiWakeUpDelayUs = mSpiCsDelayUs;
+        }
+    }
+    else
+    {
+        mSpiWakeUpDelayUs = 0;
+    }
+}
+
 otError SpiInterface::HardwareReset(void)
 {
     ResetStates();
@@ -151,6 +175,13 @@ otError SpiInterface::Init(ReceiveFrameCallback aCallback, void *aCallbackContex
     mSpiCsDelayUs       = spiCsDelay;
     mSpiSmallPacketSize = spiSmallPacketSize;
     mSpiAlignAllowance  = spiAlignAllowance;
+    mSpiWakeUpDelayUs   = OT_PLATFORM_CONFIG_SPI_DEFAULT_WAKEUP_DELAY_US;
+
+    // POWER SAVE enabled by default
+    if( mSpiCsDelayUs > mSpiWakeUpDelayUs )
+    {
+        mSpiWakeUpDelayUs = mSpiCsDelayUs;
+    }
 
     if (spiGpioIntDevice != nullptr)
     {
@@ -345,13 +376,17 @@ otError SpiInterface::DoSpiTransfer(uint8_t *aSpiRxFrameBuffer, uint32_t aTransf
 
     memset(&transfer[0], 0, sizeof(transfer));
 
+#ifndef MAX
+#define MAX(a,b)            (((a) > (b)) ? (a) : (b))
+#endif
+
     // This part is the delay between C̅S̅ being asserted and the SPI clock
     // starting. This is not supported by all Linux SPI drivers.
     transfer[0].tx_buf        = 0;
     transfer[0].rx_buf        = 0;
     transfer[0].len           = 0;
     transfer[0].speed_hz      = mSpiSpeedHz;
-    transfer[0].delay_usecs   = mSpiCsDelayUs;
+    transfer[0].delay_usecs   = (mSpiAddWakeUpSignature && mSpiTxIsReady) ? MAX(mSpiWakeUpDelayUs, mSpiCsDelayUs) : mSpiCsDelayUs;
     transfer[0].bits_per_word = kSpiBitsPerWord;
     transfer[0].cs_change     = false;
 
@@ -364,7 +399,7 @@ otError SpiInterface::DoSpiTransfer(uint8_t *aSpiRxFrameBuffer, uint32_t aTransf
     transfer[1].bits_per_word = kSpiBitsPerWord;
     transfer[1].cs_change     = false;
 
-    if (mSpiCsDelayUs > 0)
+    if (transfer[0].delay_usecs > 0)
     {
         // A C̅S̅ delay has been specified. Start transactions with both parts.
         ret = ioctl(mSpiDevFd, SPI_IOC_MESSAGE(2), &transfer[0]);
@@ -759,6 +794,14 @@ void SpiInterface::Process(const void *aMainloopContext)
     // Service the SPI port if we can receive a packet or we have a packet to be sent.
     if (mSpiTxIsReady || CheckInterrupt())
     {
+        if( mSpiWakeUpDelayUs > 0 )
+        {
+            uint32_t mode = 0;
+
+            // MOSI IDLE HIGH as default
+            ioctl(mSpiDevFd, SPI_IOC_WR_MODE32, &mode);
+        }
+
         // We guard this with the above check because we don't want to overwrite any previously received frames.
         IgnoreError(PushPullSpi());
     }
@@ -829,6 +872,13 @@ otError SpiInterface::SendFrame(const uint8_t *aFrame, uint16_t aLength)
     mSpiTxIsReady     = true;
     mSpiTxPayloadSize = aLength;
 
+    if( mSpiWakeUpDelayUs > 0 )
+    {
+        uint32_t wakeUpMode = SPI_MOSI_IDLE_LOW;
+        // MOSI_IDLE_LOW to wake-up RCP if necessary
+        ioctl(mSpiDevFd, SPI_IOC_WR_MODE32, &wakeUpMode);
+    }
+
     IgnoreError(PushPullSpi());
 
 exit:
diff --git a/src/posix/platform/spi_interface.hpp b/src/posix/platform/spi_interface.hpp
index ad96d29af..7041c4385 100644
--- a/src/posix/platform/spi_interface.hpp
+++ b/src/posix/platform/spi_interface.hpp
@@ -159,6 +159,12 @@ public:
      */
     otError HardwareReset(void);
 
+    /**
+     * Power Save Mode feature
+     *
+     */
+    void PowerSaveMode(bool aEnabled);
+
     /**
      * Returns the RCP interface metrics.
      *
@@ -259,6 +265,8 @@ private:
 
     bool mDidRxFrame;
     uint32_t mSpiRxDiscard;
+    bool     mSpiAddWakeUpSignature;
+    uint16_t mSpiWakeUpDelayUs;
 
     otRcpInterfaceMetrics mInterfaceMetrics;
 
